// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package fitbit2gcal is a generated GoMock package.
package fitbit2gcal

import (
	fitbitauth "github.com/go-zen-chu/gae-fitbit-go/pkg/domain/fitbitauth"
	gomock "github.com/golang/mock/gomock"
	oauth2 "golang.org/x/oauth2"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// FetchFitbitTokens mocks base method
func (m *MockStore) FetchFitbitTokens() (*fitbitauth.FitbitTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFitbitTokens")
	ret0, _ := ret[0].(*fitbitauth.FitbitTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFitbitTokens indicates an expected call of FetchFitbitTokens
func (mr *MockStoreMockRecorder) FetchFitbitTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFitbitTokens", reflect.TypeOf((*MockStore)(nil).FetchFitbitTokens))
}

// FetchGCalTokens mocks base method
func (m *MockStore) FetchGCalTokens() (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGCalTokens")
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchGCalTokens indicates an expected call of FetchGCalTokens
func (mr *MockStoreMockRecorder) FetchGCalTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGCalTokens", reflect.TypeOf((*MockStore)(nil).FetchGCalTokens))
}
