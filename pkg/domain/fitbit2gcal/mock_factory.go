// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go

// Package fitbit2gcal is a generated GoMock package.
package fitbit2gcal

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFactory is a mock of Factory interface
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Service mocks base method
func (m *MockFactory) Service(gcalConfig *GCalConfig) Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", gcalConfig)
	ret0, _ := ret[0].(Service)
	return ret0
}

// Service indicates an expected call of Service
func (mr *MockFactoryMockRecorder) Service(gcalConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockFactory)(nil).Service), gcalConfig)
}

// FileStore mocks base method
func (m *MockFactory) FileStore() Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileStore")
	ret0, _ := ret[0].(Store)
	return ret0
}

// FileStore indicates an expected call of FileStore
func (mr *MockFactoryMockRecorder) FileStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileStore", reflect.TypeOf((*MockFactory)(nil).FileStore))
}

// FitbitClient mocks base method
func (m *MockFactory) FitbitClient(store Store) FitbitClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FitbitClient", store)
	ret0, _ := ret[0].(FitbitClient)
	return ret0
}

// FitbitClient indicates an expected call of FitbitClient
func (mr *MockFactoryMockRecorder) FitbitClient(store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FitbitClient", reflect.TypeOf((*MockFactory)(nil).FitbitClient), store)
}

// GCalClient mocks base method
func (m *MockFactory) GCalClient(store Store, gcalConfig *GCalConfig) GCalClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GCalClient", store, gcalConfig)
	ret0, _ := ret[0].(GCalClient)
	return ret0
}

// GCalClient indicates an expected call of GCalClient
func (mr *MockFactoryMockRecorder) GCalClient(store, gcalConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GCalClient", reflect.TypeOf((*MockFactory)(nil).GCalClient), store, gcalConfig)
}
