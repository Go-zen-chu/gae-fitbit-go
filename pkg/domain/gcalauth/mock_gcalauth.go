// Code generated by MockGen. DO NOT EDIT.
// Source: gcalauth.go

// Package gcalauth is a generated GoMock package.
package gcalauth

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockGCalAuthHandler is a mock of GCalAuthHandler interface
type MockGCalAuthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGCalAuthHandlerMockRecorder
}

// MockGCalAuthHandlerMockRecorder is the mock recorder for MockGCalAuthHandler
type MockGCalAuthHandlerMockRecorder struct {
	mock *MockGCalAuthHandler
}

// NewMockGCalAuthHandler creates a new mock instance
func NewMockGCalAuthHandler(ctrl *gomock.Controller) *MockGCalAuthHandler {
	mock := &MockGCalAuthHandler{ctrl: ctrl}
	mock.recorder = &MockGCalAuthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGCalAuthHandler) EXPECT() *MockGCalAuthHandlerMockRecorder {
	return m.recorder
}

// Redirect2GCal mocks base method
func (m *MockGCalAuthHandler) Redirect2GCal(w http.ResponseWriter, r *http.Request) {
	m.ctrl.Call(m, "Redirect2GCal", w, r)
}

// Redirect2GCal indicates an expected call of Redirect2GCal
func (mr *MockGCalAuthHandlerMockRecorder) Redirect2GCal(w, r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect2GCal", reflect.TypeOf((*MockGCalAuthHandler)(nil).Redirect2GCal), w, r)
}

// HandleGCalAuthCode mocks base method
func (m *MockGCalAuthHandler) HandleGCalAuthCode(w http.ResponseWriter, r *http.Request) {
	m.ctrl.Call(m, "HandleGCalAuthCode", w, r)
}

// HandleGCalAuthCode indicates an expected call of HandleGCalAuthCode
func (mr *MockGCalAuthHandlerMockRecorder) HandleGCalAuthCode(w, r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGCalAuthCode", reflect.TypeOf((*MockGCalAuthHandler)(nil).HandleGCalAuthCode), w, r)
}
