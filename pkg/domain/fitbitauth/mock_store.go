// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package fitbitauth is a generated GoMock package.
package fitbitauth

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// WriteAuthCode mocks base method
func (m *MockStore) WriteAuthCode(authCode string) error {
	ret := m.ctrl.Call(m, "WriteAuthCode", authCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAuthCode indicates an expected call of WriteAuthCode
func (mr *MockStoreMockRecorder) WriteAuthCode(authCode interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAuthCode", reflect.TypeOf((*MockStore)(nil).WriteAuthCode), authCode)
}

// FetchAuthCode mocks base method
func (m *MockStore) FetchAuthCode() (string, error) {
	ret := m.ctrl.Call(m, "FetchAuthCode")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAuthCode indicates an expected call of FetchAuthCode
func (mr *MockStoreMockRecorder) FetchAuthCode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAuthCode", reflect.TypeOf((*MockStore)(nil).FetchAuthCode))
}

// WriteFitbitTokens mocks base method
func (m *MockStore) WriteFitbitTokens(ft *FitbitTokens) error {
	ret := m.ctrl.Call(m, "WriteFitbitTokens", ft)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFitbitTokens indicates an expected call of WriteFitbitTokens
func (mr *MockStoreMockRecorder) WriteFitbitTokens(ft interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFitbitTokens", reflect.TypeOf((*MockStore)(nil).WriteFitbitTokens), ft)
}

// FetchFitbitTokens mocks base method
func (m *MockStore) FetchFitbitTokens() (*FitbitTokens, error) {
	ret := m.ctrl.Call(m, "FetchFitbitTokens")
	ret0, _ := ret[0].(*FitbitTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFitbitTokens indicates an expected call of FetchFitbitTokens
func (mr *MockStoreMockRecorder) FetchFitbitTokens() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFitbitTokens", reflect.TypeOf((*MockStore)(nil).FetchFitbitTokens))
}
