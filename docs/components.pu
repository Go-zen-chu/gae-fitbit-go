@startuml

' di for central factory since generative methods are not domain logic
class di.DI {
  +FitbitOAuthConfig() *oauth2.Config
  +FitbitOAuthClient() da.OAuthClient
  +GCalOAuthConfig() *oauth2.Config
  +GCalOAuthClient() da.OAuthClient
  +AuthFileStore() da.Store
  +AuthStore() da.Store
  +AuthCloudStorageStore() da.Store
  +AuthService() da.Service
  +FitbitConfig() *df2g.FitbitConfig
  +FitbitClient() df2g.FitbitClient
  +GCalConfig() *df2g.GCalConfig
  +GCalClient() df2g.GCalClient
  +Fitbit2GCalService() df2g.Service
}

' application layer handles user's actual input
interface application.Command {
  +Run() error
}

' interface layer is a thin layer for handling input
interface interface.Handler {
  +GetIndex(w http.ResponseWriter, r *http.Request)
  +Redirect2Fitbit(w http.ResponseWriter, r *http.Request)
  +GetFitbitAuthCode(w http.ResponseWriter, r *http.Request)
  +Redirect2GCal(w http.ResponseWriter, r *http.Request)
  +GetGCalAuthCode(w http.ResponseWriter, r *http.Request)
  +GetFitbit2GCal(w http.ResponseWriter, r *http.Request)
  +GetFitbit2GCalToday(w http.ResponseWriter, r *http.Request)
}

' auth domain for handling authentication
interface domain.auth.OAuthClient {
  +GetAuthCodeURL() string
  +Exchange(authCode string) (*oauth2.Token, error)
}
interface domain.auth.Store {
  +WriteFitbitToken(token *oauth2.Token) error
  +FetchFitbitToken() (*oauth2.Token, error)
  +WriteGCalToken(token *oauth2.Token) error
  +FetchGCalToken() (*oauth2.Token, error)
}
interface domain.auth.Service {
  +Redirect2Fitbit(w http.ResponseWriter, r *http.Request)
  +HandleFitbitAuthCode(w http.ResponseWriter, r *http.Request)
  +Redirect2GCal(w http.ResponseWriter, r *http.Request)
  +HandleGCalAuthCode(w http.ResponseWriter, r *http.Request)
}

' fitbit2gal domain is a core domain for handling data
interface domain.fitbit2gcal.Service {
  +Fitbit2GCal(fromDate, toDate time.Time) error
  +Fitbit2GCalToday() error
}
interface domain.fitbit2gcal.FitbitClient {
  +GetSleepData(dateStr string) (*Sleep, error)
  +GetActivityData(dateStr string) (*Activity, error)
}
interface domain.fitbit2gcal.GCalClient {
  +InsertEvent(event *calendar.Event, dataType string) error
}

di.DI <-- application.Command : create
di.DI <-- interface.Handler

application.Command --> interface.Handler
interface.Handler --> domain.auth.OAuthClient
interface.Handler --> domain.auth.Service
interface.Handler --> domain.fitbit2gcal.Service

' domain should be closed internally (dont use di)
domain.auth.Service -> domain.auth.Store
domain.auth.Service -> domain.auth.OAuthClient
domain.fitbit2gcal.Service -> domain.fitbit2gcal.FitbitClient
domain.fitbit2gcal.Service -> domain.fitbit2gcal.GCalClient
domain.fitbit2gcal.FitbitClient -> domain.auth.Store
domain.fitbit2gcal.GCalClient -> domain.auth.Store
@enduml
