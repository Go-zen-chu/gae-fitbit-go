@startuml

' di for factory since generative methods are not domain logic
interface di.DI {
  +InitializeAuthFileStore() auth.Store
  +InitializeAuthCloudStorageStore() auth.Store
  +BuildFitbit2GCalService() fitbit2gal.Service
}

' index domain
interface index.Service {
  +HandleIndex()
}

' auth domain for handling authentication
interface auth.OAuthClient {
  +GetAuthCodeURL() string
  +Exchange(authCode string) (*oauth2.Token, error)
}

interface auth.Store {
  +WriteFitbitToken(token *oauth2.Token) error
  +FetchFitbitToken(token *oauth2.Token) error
  +WriteGCalToken(token *oauth2.Token) error
  +FetchGCalToken(token *oauth2.Token) error
}

interface auth.Service {
  +Redirect2Fitbit(w http.ResponseWriter, r *http.Request)
  +HandleFitbitAuthCode(w http.ResponseWriter, r *http.Request)
  +Redirect2GCal(w http.ResponseWriter, r *http.Request)
  +HandleGCalAuthCode(w http.ResponseWriter, r *http.Request)
}

di.DI <-- auth.Service
auth.Service -> auth.Store

' fitbit2gal domain is a core domain for handling data
interface fitbit2gal.Service {
  +HandleFitbit2GCal(w http.ResponseWriter, r *http.Request)
}

interface fitbit2gcal.FitbitClient {
    +GetSleepData(dateStr string) (*Sleep, error)
    +GetActivityData(dateStr string) (*Activity, error)
}

interface fitbit2gcal.GCalClient {
    +InsertEvent(event *calendar.Event, dataType string) error
}


di.DI <-- fitbit2gcal.FitbitClient
di.DI <-- fitbit2gcal.GCalClient
fitbit2gcal.FitbitClient -> auth.Store
fitbit2gcal.GCalClient -> auth.Store
di.DI <-- fitbit2gal.Service
fitbit2gal.Service -> fitbit2gcal.FitbitClient
fitbit2gal.Service -> fitbit2gcal.GCalClient


@enduml
